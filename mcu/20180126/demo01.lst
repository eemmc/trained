                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Fri Jan 26 15:35:43 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module demo01
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _table
                                     13 	.globl _main
                                     14 	.globl _dealy
                                     15 	.globl _clock
                                     16 	.globl _clockinc
                                     17 	.globl _IE
                                     18 	.globl _TH0
                                     19 	.globl _TL0
                                     20 	.globl _TMOD
                                     21 	.globl _TCON
                                     22 	.globl _P3
                                     23 	.globl _P2
                                     24 	.globl _clock_timer
                                     25 	.globl _clock_update
                                     26 ;--------------------------------------------------------
                                     27 ; special function registers
                                     28 ;--------------------------------------------------------
                                     29 	.area RSEG    (ABS,DATA)
      000000                         30 	.org 0x0000
                           0000A0    31 _P2	=	0x00a0
                           0000B0    32 _P3	=	0x00b0
                           000088    33 _TCON	=	0x0088
                           000089    34 _TMOD	=	0x0089
                           00008A    35 _TL0	=	0x008a
                           00008C    36 _TH0	=	0x008c
                           0000A8    37 _IE	=	0x00a8
                                     38 ;--------------------------------------------------------
                                     39 ; special function bits
                                     40 ;--------------------------------------------------------
                                     41 	.area RSEG    (ABS,DATA)
      000000                         42 	.org 0x0000
                                     43 ;--------------------------------------------------------
                                     44 ; overlayable register banks
                                     45 ;--------------------------------------------------------
                                     46 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         47 	.ds 8
                                     48 ;--------------------------------------------------------
                                     49 ; internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DSEG    (DATA)
      000000                         52 _clock_update::
      000000                         53 	.ds 1
      000001                         54 _clock_timer::
      000001                         55 	.ds 4
      000005                         56 _main_time_1_10:
      000005                         57 	.ds 4
                                     58 ;--------------------------------------------------------
                                     59 ; overlayable items in internal ram 
                                     60 ;--------------------------------------------------------
                                     61 	.area	OSEG    (OVR,DATA)
                                     62 	.area	OSEG    (OVR,DATA)
                                     63 ;--------------------------------------------------------
                                     64 ; Stack segment in internal ram 
                                     65 ;--------------------------------------------------------
                                     66 	.area	SSEG
      000000                         67 __start__stack:
      000000                         68 	.ds	1
                                     69 
                                     70 ;--------------------------------------------------------
                                     71 ; indirectly addressable internal ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area ISEG    (DATA)
                                     74 ;--------------------------------------------------------
                                     75 ; absolute internal ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area IABS    (ABS,DATA)
                                     78 	.area IABS    (ABS,DATA)
                                     79 ;--------------------------------------------------------
                                     80 ; bit data
                                     81 ;--------------------------------------------------------
                                     82 	.area BSEG    (BIT)
                                     83 ;--------------------------------------------------------
                                     84 ; paged external ram data
                                     85 ;--------------------------------------------------------
                                     86 	.area PSEG    (PAG,XDATA)
                                     87 ;--------------------------------------------------------
                                     88 ; external ram data
                                     89 ;--------------------------------------------------------
                                     90 	.area XSEG    (XDATA)
                                     91 ;--------------------------------------------------------
                                     92 ; absolute external ram data
                                     93 ;--------------------------------------------------------
                                     94 	.area XABS    (ABS,XDATA)
                                     95 ;--------------------------------------------------------
                                     96 ; external initialized ram data
                                     97 ;--------------------------------------------------------
                                     98 	.area XISEG   (XDATA)
                                     99 	.area HOME    (CODE)
                                    100 	.area GSINIT0 (CODE)
                                    101 	.area GSINIT1 (CODE)
                                    102 	.area GSINIT2 (CODE)
                                    103 	.area GSINIT3 (CODE)
                                    104 	.area GSINIT4 (CODE)
                                    105 	.area GSINIT5 (CODE)
                                    106 	.area GSINIT  (CODE)
                                    107 	.area GSFINAL (CODE)
                                    108 	.area CSEG    (CODE)
                                    109 ;--------------------------------------------------------
                                    110 ; interrupt vector 
                                    111 ;--------------------------------------------------------
                                    112 	.area HOME    (CODE)
      000000                        113 __interrupt_vect:
      000000 02r00r00         [24]  114 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  115 	reti
      000004                        116 	.ds	7
      00000B 02r00r00         [24]  117 	ljmp	_clockinc
                                    118 ;--------------------------------------------------------
                                    119 ; global & static initialisations
                                    120 ;--------------------------------------------------------
                                    121 	.area HOME    (CODE)
                                    122 	.area GSINIT  (CODE)
                                    123 	.area GSFINAL (CODE)
                                    124 	.area GSINIT  (CODE)
                                    125 	.globl __sdcc_gsinit_startup
                                    126 	.globl __sdcc_program_startup
                                    127 	.globl __start__stack
                                    128 	.globl __mcs51_genXINIT
                                    129 	.globl __mcs51_genXRAMCLEAR
                                    130 	.globl __mcs51_genRAMCLEAR
                                    131 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  132 	ljmp	__sdcc_program_startup
                                    133 ;--------------------------------------------------------
                                    134 ; Home
                                    135 ;--------------------------------------------------------
                                    136 	.area HOME    (CODE)
                                    137 	.area HOME    (CODE)
      00000E                        138 __sdcc_program_startup:
      00000E 02r00r47         [24]  139 	ljmp	_main
                                    140 ;	return from main will return to caller
                                    141 ;--------------------------------------------------------
                                    142 ; code
                                    143 ;--------------------------------------------------------
                                    144 	.area CSEG    (CODE)
                                    145 ;------------------------------------------------------------
                                    146 ;Allocation info for local variables in function 'clockinc'
                                    147 ;------------------------------------------------------------
                                    148 ;	demo01.c:34: void clockinc(void) __interrupt(1)
                                    149 ;	-----------------------------------------
                                    150 ;	 function clockinc
                                    151 ;	-----------------------------------------
      000000                        152 _clockinc:
                           000007   153 	ar7 = 0x07
                           000006   154 	ar6 = 0x06
                           000005   155 	ar5 = 0x05
                           000004   156 	ar4 = 0x04
                           000003   157 	ar3 = 0x03
                           000002   158 	ar2 = 0x02
                           000001   159 	ar1 = 0x01
                           000000   160 	ar0 = 0x00
      000000 C0 E0            [24]  161 	push	acc
      000002 C0 D0            [24]  162 	push	psw
                                    163 ;	demo01.c:36: TIMER_RESET(65536-990);
      000004 75 8C FC         [24]  164 	mov	_TH0,#0xFC
      000007 75 8A 22         [24]  165 	mov	_TL0,#0x22
                                    166 ;	demo01.c:37: clock_timer++;
      00000A 74 01            [12]  167 	mov	a,#0x01
      00000C 25*01            [12]  168 	add	a,_clock_timer
      00000E F5*01            [12]  169 	mov	_clock_timer,a
      000010 E4               [12]  170 	clr	a
      000011 35*02            [12]  171 	addc	a,(_clock_timer + 1)
      000013 F5*02            [12]  172 	mov	(_clock_timer + 1),a
      000015 E4               [12]  173 	clr	a
      000016 35*03            [12]  174 	addc	a,(_clock_timer + 2)
      000018 F5*03            [12]  175 	mov	(_clock_timer + 2),a
      00001A E4               [12]  176 	clr	a
      00001B 35*04            [12]  177 	addc	a,(_clock_timer + 3)
      00001D F5*04            [12]  178 	mov	(_clock_timer + 3),a
                                    179 ;	demo01.c:38: clock_update=1;
      00001F 75*00 01         [24]  180 	mov	_clock_update,#0x01
      000022 D0 D0            [24]  181 	pop	psw
      000024 D0 E0            [24]  182 	pop	acc
      000026 32               [24]  183 	reti
                                    184 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    185 ;	eliminated unneeded push/pop dpl
                                    186 ;	eliminated unneeded push/pop dph
                                    187 ;	eliminated unneeded push/pop b
                                    188 ;------------------------------------------------------------
                                    189 ;Allocation info for local variables in function 'clock'
                                    190 ;------------------------------------------------------------
                                    191 ;ctmp                      Allocated to registers r4 r5 r6 r7 
                                    192 ;------------------------------------------------------------
                                    193 ;	demo01.c:41: unsigned long clock(void)
                                    194 ;	-----------------------------------------
                                    195 ;	 function clock
                                    196 ;	-----------------------------------------
      000027                        197 _clock:
                                    198 ;	demo01.c:45: do
      000027                        199 00101$:
                                    200 ;	demo01.c:47: clock_update=0;
      000027 75*00 00         [24]  201 	mov	_clock_update,#0x00
                                    202 ;	demo01.c:48: ctmp=clock_timer;
      00002A AC*01            [24]  203 	mov	r4,_clock_timer
      00002C AD*02            [24]  204 	mov	r5,(_clock_timer + 1)
      00002E AE*03            [24]  205 	mov	r6,(_clock_timer + 2)
      000030 AF*04            [24]  206 	mov	r7,(_clock_timer + 3)
                                    207 ;	demo01.c:49: }while(clock_update);
      000032 E5*00            [12]  208 	mov	a,_clock_update
      000034 70 F1            [24]  209 	jnz	00101$
                                    210 ;	demo01.c:51: return ctmp;
      000036 8C 82            [24]  211 	mov	dpl,r4
      000038 8D 83            [24]  212 	mov	dph,r5
      00003A 8E F0            [24]  213 	mov	b,r6
      00003C EF               [12]  214 	mov	a,r7
      00003D 22               [24]  215 	ret
                                    216 ;------------------------------------------------------------
                                    217 ;Allocation info for local variables in function 'dealy'
                                    218 ;------------------------------------------------------------
                                    219 ;us                        Allocated to registers 
                                    220 ;------------------------------------------------------------
                                    221 ;	demo01.c:54: void dealy(unsigned char us){
                                    222 ;	-----------------------------------------
                                    223 ;	 function dealy
                                    224 ;	-----------------------------------------
      00003E                        225 _dealy:
      00003E AF 82            [24]  226 	mov	r7,dpl
                                    227 ;	demo01.c:55: while(us--);
      000040                        228 00101$:
      000040 8F 06            [24]  229 	mov	ar6,r7
      000042 1F               [12]  230 	dec	r7
      000043 EE               [12]  231 	mov	a,r6
      000044 70 FA            [24]  232 	jnz	00101$
      000046 22               [24]  233 	ret
                                    234 ;------------------------------------------------------------
                                    235 ;Allocation info for local variables in function 'main'
                                    236 ;------------------------------------------------------------
                                    237 ;swap                      Allocated to registers r0 
                                    238 ;time                      Allocated with name '_main_time_1_10'
                                    239 ;------------------------------------------------------------
                                    240 ;	demo01.c:58: void main(void)
                                    241 ;	-----------------------------------------
                                    242 ;	 function main
                                    243 ;	-----------------------------------------
      000047                        244 _main:
                                    245 ;	demo01.c:63: TIMER_RESET(65536-994);
      000047 75 8C FC         [24]  246 	mov	_TH0,#0xFC
      00004A 75 8A 1E         [24]  247 	mov	_TL0,#0x1E
                                    248 ;	demo01.c:64: TIMER_START();
      00004D 75 89 01         [24]  249 	mov	_TMOD,#0x01
      000050 43 A8 82         [24]  250 	orl	_IE,#0x82
      000053 43 88 10         [24]  251 	orl	_TCON,#0x10
                                    252 ;	demo01.c:66: while(1){
      000056                        253 00102$:
                                    254 ;	demo01.c:67: time=clock()/1000;
      000056 12r00r27         [24]  255 	lcall	_clock
      000059 AC 82            [24]  256 	mov	r4,dpl
      00005B AD 83            [24]  257 	mov	r5,dph
      00005D AE F0            [24]  258 	mov	r6,b
      00005F FF               [12]  259 	mov	r7,a
      000060 75*00 E8         [24]  260 	mov	__divulong_PARM_2,#0xE8
      000063 75*01 03         [24]  261 	mov	(__divulong_PARM_2 + 1),#0x03
      000066 E4               [12]  262 	clr	a
      000067 F5*02            [12]  263 	mov	(__divulong_PARM_2 + 2),a
      000069 F5*03            [12]  264 	mov	(__divulong_PARM_2 + 3),a
      00006B 8C 82            [24]  265 	mov	dpl,r4
      00006D 8D 83            [24]  266 	mov	dph,r5
      00006F 8E F0            [24]  267 	mov	b,r6
      000071 EF               [12]  268 	mov	a,r7
      000072 12r00r00         [24]  269 	lcall	__divulong
      000075 85 82*05         [24]  270 	mov	_main_time_1_10,dpl
      000078 85 83*06         [24]  271 	mov	(_main_time_1_10 + 1),dph
      00007B 85 F0*07         [24]  272 	mov	(_main_time_1_10 + 2),b
      00007E F5*08            [12]  273 	mov	(_main_time_1_10 + 3),a
                                    274 ;	demo01.c:69: swap=time%60;
      000080 75*00 3C         [24]  275 	mov	__modulong_PARM_2,#0x3C
      000083 E4               [12]  276 	clr	a
      000084 F5*01            [12]  277 	mov	(__modulong_PARM_2 + 1),a
      000086 F5*02            [12]  278 	mov	(__modulong_PARM_2 + 2),a
      000088 F5*03            [12]  279 	mov	(__modulong_PARM_2 + 3),a
      00008A 85*05 82         [24]  280 	mov	dpl,_main_time_1_10
      00008D 85*06 83         [24]  281 	mov	dph,(_main_time_1_10 + 1)
      000090 85*07 F0         [24]  282 	mov	b,(_main_time_1_10 + 2)
      000093 E5*08            [12]  283 	mov	a,(_main_time_1_10 + 3)
      000095 12r00r00         [24]  284 	lcall	__modulong
      000098 A8 82            [24]  285 	mov	r0,dpl
                                    286 ;	demo01.c:70: P3=0x80;
      00009A 75 B0 80         [24]  287 	mov	_P3,#0x80
                                    288 ;	demo01.c:71: P2=table[swap%10];
      00009D 75 F0 0A         [24]  289 	mov	b,#0x0A
      0000A0 E8               [12]  290 	mov	a,r0
      0000A1 84               [48]  291 	div	ab
      0000A2 E5 F0            [12]  292 	mov	a,b
      0000A4 90r00r00         [24]  293 	mov	dptr,#_table
      0000A7 93               [24]  294 	movc	a,@a+dptr
      0000A8 F5 A0            [12]  295 	mov	_P2,a
                                    296 ;	demo01.c:72: dealy(60);
      0000AA 75 82 3C         [24]  297 	mov	dpl,#0x3C
      0000AD C0 00            [24]  298 	push	ar0
      0000AF 12r00r3E         [24]  299 	lcall	_dealy
      0000B2 D0 00            [24]  300 	pop	ar0
                                    301 ;	demo01.c:73: P3=0x40;
      0000B4 75 B0 40         [24]  302 	mov	_P3,#0x40
                                    303 ;	demo01.c:74: P2=table[swap/10];
      0000B7 75 F0 0A         [24]  304 	mov	b,#0x0A
      0000BA E8               [12]  305 	mov	a,r0
      0000BB 84               [48]  306 	div	ab
      0000BC 90r00r00         [24]  307 	mov	dptr,#_table
      0000BF 93               [24]  308 	movc	a,@a+dptr
      0000C0 F5 A0            [12]  309 	mov	_P2,a
                                    310 ;	demo01.c:75: dealy(60);
      0000C2 75 82 3C         [24]  311 	mov	dpl,#0x3C
      0000C5 12r00r3E         [24]  312 	lcall	_dealy
                                    313 ;	demo01.c:77: time=time/60;
      0000C8 75*00 3C         [24]  314 	mov	__divulong_PARM_2,#0x3C
      0000CB E4               [12]  315 	clr	a
      0000CC F5*01            [12]  316 	mov	(__divulong_PARM_2 + 1),a
      0000CE F5*02            [12]  317 	mov	(__divulong_PARM_2 + 2),a
      0000D0 F5*03            [12]  318 	mov	(__divulong_PARM_2 + 3),a
      0000D2 85*05 82         [24]  319 	mov	dpl,_main_time_1_10
      0000D5 85*06 83         [24]  320 	mov	dph,(_main_time_1_10 + 1)
      0000D8 85*07 F0         [24]  321 	mov	b,(_main_time_1_10 + 2)
      0000DB E5*08            [12]  322 	mov	a,(_main_time_1_10 + 3)
      0000DD 12r00r00         [24]  323 	lcall	__divulong
      0000E0 85 82*05         [24]  324 	mov	_main_time_1_10,dpl
      0000E3 85 83*06         [24]  325 	mov	(_main_time_1_10 + 1),dph
      0000E6 85 F0*07         [24]  326 	mov	(_main_time_1_10 + 2),b
      0000E9 F5*08            [12]  327 	mov	(_main_time_1_10 + 3),a
                                    328 ;	demo01.c:78: swap=time%60;
      0000EB 75*00 3C         [24]  329 	mov	__modulong_PARM_2,#0x3C
      0000EE E4               [12]  330 	clr	a
      0000EF F5*01            [12]  331 	mov	(__modulong_PARM_2 + 1),a
      0000F1 F5*02            [12]  332 	mov	(__modulong_PARM_2 + 2),a
      0000F3 F5*03            [12]  333 	mov	(__modulong_PARM_2 + 3),a
      0000F5 85*05 82         [24]  334 	mov	dpl,_main_time_1_10
      0000F8 85*06 83         [24]  335 	mov	dph,(_main_time_1_10 + 1)
      0000FB 85*07 F0         [24]  336 	mov	b,(_main_time_1_10 + 2)
      0000FE E5*08            [12]  337 	mov	a,(_main_time_1_10 + 3)
      000100 12r00r00         [24]  338 	lcall	__modulong
      000103 A9 82            [24]  339 	mov	r1,dpl
      000105 89 00            [24]  340 	mov	ar0,r1
                                    341 ;	demo01.c:79: P3=0x10;
      000107 75 B0 10         [24]  342 	mov	_P3,#0x10
                                    343 ;	demo01.c:80: P2=table[swap%10];
      00010A 75 F0 0A         [24]  344 	mov	b,#0x0A
      00010D E8               [12]  345 	mov	a,r0
      00010E 84               [48]  346 	div	ab
      00010F E5 F0            [12]  347 	mov	a,b
      000111 90r00r00         [24]  348 	mov	dptr,#_table
      000114 93               [24]  349 	movc	a,@a+dptr
      000115 F5 A0            [12]  350 	mov	_P2,a
                                    351 ;	demo01.c:81: dealy(60);
      000117 75 82 3C         [24]  352 	mov	dpl,#0x3C
      00011A C0 00            [24]  353 	push	ar0
      00011C 12r00r3E         [24]  354 	lcall	_dealy
      00011F D0 00            [24]  355 	pop	ar0
                                    356 ;	demo01.c:82: P3=0x08;
      000121 75 B0 08         [24]  357 	mov	_P3,#0x08
                                    358 ;	demo01.c:83: P2=table[swap/10];
      000124 75 F0 0A         [24]  359 	mov	b,#0x0A
      000127 E8               [12]  360 	mov	a,r0
      000128 84               [48]  361 	div	ab
      000129 90r00r00         [24]  362 	mov	dptr,#_table
      00012C 93               [24]  363 	movc	a,@a+dptr
      00012D F5 A0            [12]  364 	mov	_P2,a
                                    365 ;	demo01.c:84: dealy(60);
      00012F 75 82 3C         [24]  366 	mov	dpl,#0x3C
      000132 12r00r3E         [24]  367 	lcall	_dealy
                                    368 ;	demo01.c:86: time=time/60;
      000135 75*00 3C         [24]  369 	mov	__divulong_PARM_2,#0x3C
      000138 E4               [12]  370 	clr	a
      000139 F5*01            [12]  371 	mov	(__divulong_PARM_2 + 1),a
      00013B F5*02            [12]  372 	mov	(__divulong_PARM_2 + 2),a
      00013D F5*03            [12]  373 	mov	(__divulong_PARM_2 + 3),a
      00013F 85*05 82         [24]  374 	mov	dpl,_main_time_1_10
      000142 85*06 83         [24]  375 	mov	dph,(_main_time_1_10 + 1)
      000145 85*07 F0         [24]  376 	mov	b,(_main_time_1_10 + 2)
      000148 E5*08            [12]  377 	mov	a,(_main_time_1_10 + 3)
      00014A 12r00r00         [24]  378 	lcall	__divulong
      00014D 85 82*05         [24]  379 	mov	_main_time_1_10,dpl
      000150 85 83*06         [24]  380 	mov	(_main_time_1_10 + 1),dph
      000153 85 F0*07         [24]  381 	mov	(_main_time_1_10 + 2),b
      000156 F5*08            [12]  382 	mov	(_main_time_1_10 + 3),a
                                    383 ;	demo01.c:87: swap=time%60;
      000158 75*00 3C         [24]  384 	mov	__modulong_PARM_2,#0x3C
      00015B E4               [12]  385 	clr	a
      00015C F5*01            [12]  386 	mov	(__modulong_PARM_2 + 1),a
      00015E F5*02            [12]  387 	mov	(__modulong_PARM_2 + 2),a
      000160 F5*03            [12]  388 	mov	(__modulong_PARM_2 + 3),a
      000162 85*05 82         [24]  389 	mov	dpl,_main_time_1_10
      000165 85*06 83         [24]  390 	mov	dph,(_main_time_1_10 + 1)
      000168 85*07 F0         [24]  391 	mov	b,(_main_time_1_10 + 2)
      00016B E5*08            [12]  392 	mov	a,(_main_time_1_10 + 3)
      00016D 12r00r00         [24]  393 	lcall	__modulong
      000170 AC 82            [24]  394 	mov	r4,dpl
      000172 8C 00            [24]  395 	mov	ar0,r4
                                    396 ;	demo01.c:88: P3=0x02;
      000174 75 B0 02         [24]  397 	mov	_P3,#0x02
                                    398 ;	demo01.c:89: P2=table[swap%10];
      000177 75 F0 0A         [24]  399 	mov	b,#0x0A
      00017A E8               [12]  400 	mov	a,r0
      00017B 84               [48]  401 	div	ab
      00017C E5 F0            [12]  402 	mov	a,b
      00017E 90r00r00         [24]  403 	mov	dptr,#_table
      000181 93               [24]  404 	movc	a,@a+dptr
      000182 F5 A0            [12]  405 	mov	_P2,a
                                    406 ;	demo01.c:90: dealy(60);
      000184 75 82 3C         [24]  407 	mov	dpl,#0x3C
      000187 C0 00            [24]  408 	push	ar0
      000189 12r00r3E         [24]  409 	lcall	_dealy
      00018C D0 00            [24]  410 	pop	ar0
                                    411 ;	demo01.c:91: P3=0x01;
      00018E 75 B0 01         [24]  412 	mov	_P3,#0x01
                                    413 ;	demo01.c:92: P2=table[swap/10];
      000191 75 F0 0A         [24]  414 	mov	b,#0x0A
      000194 E8               [12]  415 	mov	a,r0
      000195 84               [48]  416 	div	ab
      000196 90r00r00         [24]  417 	mov	dptr,#_table
      000199 93               [24]  418 	movc	a,@a+dptr
      00019A F5 A0            [12]  419 	mov	_P2,a
                                    420 ;	demo01.c:93: dealy(60);
      00019C 75 82 3C         [24]  421 	mov	dpl,#0x3C
      00019F 12r00r3E         [24]  422 	lcall	_dealy
      0001A2 02r00r56         [24]  423 	ljmp	00102$
                                    424 	.area CSEG    (CODE)
                                    425 	.area CONST   (CODE)
      000000                        426 _table:
      000000 C0                     427 	.db #0xC0	; 192
      000001 F9                     428 	.db #0xF9	; 249
      000002 A4                     429 	.db #0xA4	; 164
      000003 B0                     430 	.db #0xB0	; 176
      000004 99                     431 	.db #0x99	; 153
      000005 92                     432 	.db #0x92	; 146
      000006 82                     433 	.db #0x82	; 130
      000007 F8                     434 	.db #0xF8	; 248
      000008 80                     435 	.db #0x80	; 128
      000009 90                     436 	.db #0x90	; 144
      00000A 88                     437 	.db #0x88	; 136
      00000B 83                     438 	.db #0x83	; 131
      00000C C6                     439 	.db #0xC6	; 198
      00000D A1                     440 	.db #0xA1	; 161
      00000E 86                     441 	.db #0x86	; 134
      00000F 8E                     442 	.db #0x8E	; 142
                                    443 	.area XINIT   (CODE)
                                    444 	.area CABS    (ABS,CODE)
